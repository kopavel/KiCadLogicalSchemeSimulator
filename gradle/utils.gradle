/*
 * Copyright (c) 2024 Pavel Korzh
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 * may be used to endorse or promote products derived from this software
 * without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

import java.net.http.HttpClient
import java.net.http.HttpRequest
import java.net.http.HttpResponse

project.ext.downloadFileIfNotExists = { String fileUrl, File destinationFile ->
    if (!destinationFile.exists()) {
        println "Downloading file from ${fileUrl}..."

        def client = HttpClient.newHttpClient()
        def request = HttpRequest.newBuilder()
                .uri(URI.create(fileUrl))
                .build()

        def response = client.send(request, HttpResponse.BodyHandlers.ofInputStream())

        // Check if the response status code is 200 or 302
        if (response.statusCode() == 200) {
            destinationFile.withOutputStream { outputStream ->
                response.body().transferTo(outputStream)
            }
            println "File downloaded: ${destinationFile}"
        } else if (response.statusCode() == 302) {
            // Handle redirect
            String newUrl = response.headers().firstValue("Location").orElse(null)
            if (newUrl) {
                println "Redirecting to: ${newUrl}"
                downloadFileIfNotExists(newUrl, destinationFile) // Recursively call the method
            } else {
                println "Redirect URL not found in response headers."
            }
        } else {
            println "Failed to download file: ${response.statusCode()} - ${response.body()}"
        }
    } else {
        println "File already exists: ${destinationFile}"
    }
}

