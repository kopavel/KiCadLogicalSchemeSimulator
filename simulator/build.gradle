/*
 * Copyright (c) 2024 Pavel Korzh
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 * may be used to endorse or promote products derived from this software
 * without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


plugins {
//    alias libs.plugins.guidesigner
    id "application"
}

dependencies {
    implementation(project(":unnamedModules:ideaGui"))
    implementation libs.swing.flatlaf
    implementation libs.log4j.slf4j
    implementation libs.log4j.old
    implementation libs.log4j.core
    implementation libs.log4j.jcl
    implementation libs.log4j.jul
    implementation libs.log4j.jpl
    implementation libs.xz
    implementation libs.commons.compress
    runtimeOnly(project(":schemaParts"))
    implementation libs.jackson.databind
    implementation libs.jaxb.api
    implementation libs.jakarta.api
    implementation libs.jackson.jakarta.annotations
    implementation libs.jackson.dataformat.xml
    implementation libs.jackson.datatype.jsr310
    implementation libs.jackson.jaxb.annotations
    implementation libs.picocli
    testImplementation libs.jmh
    testAnnotationProcessor libs.jmh.annotations
}

jar {
    destinationDirectory = file("$rootDir/distro")
    from(sourceSets.main.allSource) {
        include '**/*.java'  // Filter to include only Java files
    }
    exclude 'classpath.index'
}
application {
    group = "_build"
    mainModule = "KiCadLogicalSchemeSimulator.simulator"
    mainClass = "pko.KiCadLogicalSchemeSimulator.Simulator"
    tasks.named("distTar") { it.enabled = false }
    tasks.named("distZip") { it.enabled = false }
    tasks.named("startScripts") { it.enabled = false }
}

run {
    def jvm_args = []
    jvm_args += ["-Dlog4j.configurationFile=${sourceSets.main.resources.srcDirs.first().absolutePath}/log4j2.xml",
                 "-Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager",
                 "-XX:+UseParallelGC",
                 "-XX:CompileThreshold=10",
                 "-XX:MaxInlineSize=48",
                 "-XX:MaxInlineLevel=14",
                 "-XX:ParallelGCThreads=1",
                 "-Xmx2G",
    ]
    if (project.hasProperty('ea')) {
        jvm_args += ["-ea"]
    }
    if (!project.hasProperty('noCache')) {
        jvm_args += ["--patch-module", "KiCadLogicalSchemeSimulator.simulator=optimised"]
    }
    jvmArgs(jvm_args)
    if (project.hasProperty('appArgs')) {
        def appArgsList = project.getProperties().get('appArgs').split(',')
        args(appArgsList)
    }
    if (project.hasProperty('workDir')) {
        if (project.getProperties().get('workDir').toString().contains(":")) {
            workingDir = project.getProperties().get('workDir')
        } else {
            workingDir = "$rootDir/" + project.getProperties().get('workDir')
        }
    } else {
        workingDir = "$rootDir/stuff/work"

    }
}
tasks.register("runJmh", JavaExec) {
    group = 'Benchmark'
    description = 'Run JMH benchmarks'

    classpath = sourceSets.test.runtimeClasspath
    mainClass = 'org.openjdk.jmh.Main'
    // Optional: Set JVM arguments
    jvmArgs = [
            '--module-path', "$rootDir/distro/;$rootDir/distro/lib/",
            '--add-modules', "KiCadLogicalSchemeSimulator.simulator",
            '--add-exports', 'KiCadLogicalSchemeSimulator.simulator/pko.KiCadLogicalSchemeSimulator.net.bus=ALL-UNNAMED', // Add this line
            '--add-exports', 'KiCadLogicalSchemeSimulator.simulator/pko.KiCadLogicalSchemeSimulator.net.wire=ALL-UNNAMED', // Add this line
/*
            '--patch-module', "KiCadLogicalSchemeSimulator.simulator=$projectDir/optimised"
*/
    ]
    args = [
            '-wi', '1', // Number of warm-up iterations
            '-w', '2', // time of warm-up iterations
            '-i', '5', // Number of iterations
            '-r', '15', // time of iterations
            '-f1', // Number of forks
            '-t1', // Number of threads
//            "pko.KiCadLogicalSchemeSimulator.test.benchmarks.OutPinBenchmark.optimiser",//
//            "pko.KiCadLogicalSchemeSimulator.test.benchmarks.OutBusBenchmark.optimiser",//
//            "pko.KiCadLogicalSchemeSimulator.test.benchmarks.MaskGroupBenchmark.optimiser",//
//            "pko.KiCadLogicalSchemeSimulator.test.benchmarks.OffsetBusBenchmark.optimiser",//
//            "pko.KiCadLogicalSchemeSimulator.test.benchmarks.WireToBusBenchmark.optimiser",//
            "pko.KiCadLogicalSchemeSimulator.test.benchmarks.BusToWireBenchmark.optimiser"//
    ]
}