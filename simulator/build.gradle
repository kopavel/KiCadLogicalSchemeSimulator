/*
 * Copyright (c) 2024 Pavel Korzh
 * <p>
 * All rights reserved.
 * <p>
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * <p>
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * <p>
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * <p>
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * <p>
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */


plugins {
    alias libs.plugins.guidesigner
    id "application"
}

dependencies {
    implementation(project(":unnamedModules:ideaGui"))
    implementation libs.swing.flatlaf
    implementation libs.log4j.slf4j
    implementation libs.log4j.old
    implementation libs.log4j.core
    implementation libs.log4j.jcl
    implementation libs.log4j.jul
    implementation libs.log4j.jpl
    implementation libs.xz
    implementation libs.commons.compress
    implementation libs.disruptor
    runtimeOnly(project(":schemaParts"))
    implementation libs.jackson.databind
    implementation libs.jaxb.api
    implementation libs.jakarta.api
    implementation libs.jackson.jakarta.annotations
    implementation libs.jackson.dataformat.xml
    implementation libs.jackson.datatype.jsr310
    implementation libs.jackson.jaxb.annotations
    implementation libs.asm
    implementation libs.asm.tree
    implementation libs.picocli

}

jar {
    destinationDirectory = file("$rootDir/distro")
    exclude 'classpath.index'
    manifest {
        attributes(
                'Main-Class': 'lv.pko.simulator.Main',
                'Class-Path': configurations.runtimeClasspath.collect { 'lib/' + it.getName() }.join(' ')
        )
    }
}
application {
    group = "_build"
    mainModule = "DigitalNetSimulator.simulator"
    mainClass = "lv.pko.DigitalNetSimulator.Simulator"
    tasks.named("distTar") { it.enabled = false }
    tasks.named("distZip") { it.enabled = false }
    tasks.named("startScripts") { it.enabled = false }
}

run {
    def jvm_args = []
    jvm_args += ["-Dlog4j.configurationFile=${sourceSets.main.resources.srcDirs.first().absolutePath}\\log4j2.xml",
                 "-Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager",
                 "-Dlog4j2.contextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector",
                 "-Dlog4j2.asyncLoggerWaitStrategy=Block",
                 "-XX:-OmitStackTraceInFastThrow",
                 "--add-opens", "java.base/java.lang=DigitalNetSimulator.simulator",
/*
                 "-Dlog4j2.asyncLoggerRingBufferSize=10485760",
*/
                 "-Dlog4j2.asyncLoggerThreadNameStrategy=CACHED"]
    jvmArgs(jvm_args)
    if (project.hasProperty('appArgs')) {
        def appArgsList = project.getProperties().get('appArgs').split(',')
        args(appArgsList)
    }
    if (project.hasProperty('workDir')) {
        workingDir = "$rootDir/" + project.getProperties().get('workDir')
    } else {
        workingDir = "$rootDir/stuff/work"

    }
}