/*
 * Copyright (c) 2024 Pavel Korzh
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 * may be used to endorse or promote products derived from this software
 * without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
//ToDo
// add filters:
//   similar interconnected inputs -> -1 input
//   or/and with 1 input -> repeater
//   repeater on power rail -> power
//   pull on strong only
// no need in pull down resisters?
// "not used" pin -> add "on power rail"

sourceSets {
    main {
        java {
            srcDirs = [] // Empty source directories list to disable Java source directory
        }
        resources {
            srcDirs = [] // Empty source directories list to disable resources directory
        }
    }
    test {
        java {
            srcDirs = [] // Empty source directories list to disable Java source directory
        }
        resources {
            srcDirs = [] // Empty source directories list to disable resources directory
        }
    }
}
dependencies {
    runtimeOnly project("and")
    runtimeOnly project("buffer")
    runtimeOnly project("busDriver")
    runtimeOnly project("counter")
    runtimeOnly project("dCounter")
    runtimeOnly project("dcTrigger")
    runtimeOnly project("decoder")
    runtimeOnly project("dipSwitch")
    runtimeOnly project("display")
    runtimeOnly project("jkTrigger")
    runtimeOnly project("keyboard")
    runtimeOnly project("led")
    runtimeOnly project("led7SegmentDisplay")
    runtimeOnly project("led16SegmentDisplay")
    runtimeOnly project("mos6502")
    runtimeOnly project("mos6532")
    runtimeOnly project("multiplexer")
    runtimeOnly project("or")
    runtimeOnly project("oscillator")
    runtimeOnly project("diode")
    runtimeOnly project("resister")
    runtimeOnly project("switch")
    runtimeOnly project("power")
    runtimeOnly project("ram")
    runtimeOnly project("repeater")
    runtimeOnly project("ringCounter")
    runtimeOnly project("rom")
    runtimeOnly project("sdram")
    runtimeOnly project("shifter")
    runtimeOnly project("stateMachine")
    runtimeOnly project("tester")
    runtimeOnly project("xor")
    runtimeOnly project("z80")
}

tasks.named("jar") {
    onlyIf { false }
}

configure(subprojects) { subproject ->
    sourceSets {
        test {
            java {
                srcDirs = ["test/java"]
            }
            resources {
                srcDirs = ["test/resources"]
            }
        }
    }
    tasks.register("bench", JavaExec) {
        group = 'Benchmark'
        description = 'Run JMH benchmarks'
        classpath = sourceSets.test.runtimeClasspath
        mainClass = 'org.openjdk.jmh.Main'
        // Optional: Set JVM arguments
        jvmArgs = [
                '--module-path', "$rootDir/distro/;$rootDir/distro/lib/;$rootDir/distro/schemaParts/",
                '--add-modules', "KiCadLogicalSchemeSimulator.simulator",
                '--add-exports', 'KiCadLogicalSchemeSimulator.simulator/pko.KiCadLogicalSchemeSimulator.net.bus=ALL-UNNAMED',
                '--add-exports', 'KiCadLogicalSchemeSimulator.simulator/pko.KiCadLogicalSchemeSimulator.net.wire=ALL-UNNAMED',
                '--add-exports', 'KiCadLogicalSchemeSimulator.simulator/pko.KiCadLogicalSchemeSimulator.parsers.net=ALL-UNNAMED',
                '--add-exports', 'KiCadLogicalSchemeSimulator.simulator/pko.KiCadLogicalSchemeSimulator.parsers.xml=ALL-UNNAMED',
                '--add-opens', 'java.base/java.lang=KiCadLogicalSchemeSimulator.simulator',
        ]
        args = [
                '-wi', '10', // Number of warm-up iterations
                '-w', '3', // time of warm-up iterations
                '-i', '10', // Number of iterations
                '-r', '3', // time of iterations
                '-f1', // Number of forks
                '-t1', // Number of threads
                "pko.KiCadLogicalSchemeSimulator.components.${project.name.toUpperCase()}.test.Benchmark.bench"//
        ]
    }
    dependencies {
        implementation project(":simulator")
        testImplementation project(":simulator").sourceSets.test.output
        testRuntimeOnly project(":simulator")
        testImplementation libs.jmh
        testAnnotationProcessor libs.jmh.annotations
    }
    tasks.named("jar") {
        doFirst {
            delete fileTree(dir: layout.buildDirectory.dir("classes/java/main"), include: '**/*.java')
        }
        destinationDirectory = file("$rootDir/distro/schemaParts")
        from(sourceSets.main.allSource) {
            include '**/*.java'  // Filter to include only Java files
        }

    }
    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
        doFirst {
            delete fileTree(dir: layout.buildDirectory.dir("classes/java/main"), include: '**/*.java')
            copy {
                from 'src/java'
                into layout.buildDirectory.dir("classes/java/main")
                duplicatesStrategy = DuplicatesStrategy.EXCLUDE
            }
            jvmArgs += [
                    '--module-path', classpath.asPath,
                    '--add-modules', 'KiCadLogicalSchemeSimulator.simulator',
                    '--add-exports', 'KiCadLogicalSchemeSimulator.simulator/pko.KiCadLogicalSchemeSimulator.parsers.net=ALL-UNNAMED',
                    '--add-exports', 'KiCadLogicalSchemeSimulator.simulator/pko.KiCadLogicalSchemeSimulator.parsers.xml=ALL-UNNAMED',
                    '--add-opens', 'java.base/java.lang=KiCadLogicalSchemeSimulator.simulator'
            ]
        }
    }

}
