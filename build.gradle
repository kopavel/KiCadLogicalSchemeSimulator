/*
 * Copyright (c) 2024 Pavel Korzh
 * <p>
 * All rights reserved.
 * <p>
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * <p>
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * <p>
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * <p>
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 * <p>
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 */

plugins {
    id 'idea'
    alias libs.plugins.guidesigner
}

group 'lv.pko'
version '0.1'
tasks.register("cleanBuild", Delete).configure() {
    delete fileTree(dir: "$rootDir/distro/")
    doLast {
        fileTree(dir: "$rootDir/distro/").visit { it.file.delete() }
    }
}

tasks.register("copyToLib", Copy) {
    into "$rootDir/distro/lib/"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
tasks.register("copyStuff", Copy) {
    from {
        [
                "$rootDir/stuff/scripts/run.bat",
                "$rootDir/stuff/scripts/run.sh",
                "$rootDir/stuff/scripts/start.bat",
                "$rootDir/stuff/scripts/start.sh",
                "$rootDir/stuff/scripts/simulate.py",
                "$rootDir/stuff/kicad_symbols/SymbolsDescription.xml"
        ]
    }
    into "$rootDir/distro"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

configure(subprojects) {
    apply {
        plugin('idea')
        plugin('java')
    }
    sourceSets {
        main {
            java {
                srcDirs = ["src/java"]
            }
            resources {
                srcDirs = ["src/resources"]
            }
        }
        test {
            java {
                srcDirs = []
            }
            resources {
                srcDirs = []
            }
        }
    }

    compileTestJava {
        onlyIf { false }
    }
    dependencies {
        compileOnly libs.lombok
        annotationProcessor libs.lombok
    }
    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }
    compileJava {
        options.encoding = 'UTF-8'
        options.deprecation = true
        options.compilerArgs.add('-Xlint:unchecked')
    }

    plugins.withType(JavaPlugin).configureEach() {
        tasks.named("jar") {
            mustRunAfter rootProject.tasks.named("cleanBuild")
            mustRunAfter rootProject.tasks.named("copyStuff")
        }
        tasks.named('assemble') {
            dependsOn(rootProject.tasks.named('copyToLib'))
            dependsOn(rootProject.tasks.named('copyStuff'))
        }
        rootProject.tasks.named("copyToLib") {
            from(configurations.runtimeClasspath) {
                rootProject.subprojects.jar.each { it.outputs.files.each { exclude it.getName() } }
            }
        }
    }
    tasks.named('assemble') {
        group '_build'
    }

}

idea {
    module {
        excludeDirs += file('distro')
        excludeDirs += file('stuff/work')
    }
}

allprojects {
    tasks.withType(Test).tap {
        configureEach {
            enabled = false
        }
    }
    idea {
        module {
            testSourceDirs = []
        }
    }
}
