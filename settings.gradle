import org.gradle.api.initialization.resolve.RepositoriesMode

rootProject.name = 'KiCadLogicalSchemeSimulator'
include ':schemaParts'
include ':schemaParts:and'
include ':schemaParts:buffer'
include ':schemaParts:busDriver'
include ':schemaParts:counter'
include ':schemaParts:dCounter'
include ':schemaParts:dcTrigger'
include ':schemaParts:decoder'
include ':schemaParts:diode'
include ':schemaParts:dipSwitch'
include ':schemaParts:display'
include ':schemaParts:jkTrigger'
include ':schemaParts:keyboard'
include ':schemaParts:led'
include ':schemaParts:led16SegmentDisplay'
include ':schemaParts:led7SegmentDisplay'
include ':schemaParts:mos6502'
include ':schemaParts:mos6532'
include ':schemaParts:multiplexer'
include ':schemaParts:or'
include ':schemaParts:oscillator'
include ':schemaParts:power'
include ':schemaParts:ram'
include ':schemaParts:repeater'
include ':schemaParts:resister'
include ':schemaParts:ringCounter'
include ':schemaParts:rom'
include ':schemaParts:sdram'
include ':schemaParts:shifter'
include ':schemaParts:stateMachine'
include ':schemaParts:switch'
include ':schemaParts:tester'
include ':schemaParts:xor'
include ':schemaParts:z80'
include ':simulator'
include ':unnamedModules:ideaGui'

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.PREFER_SETTINGS)
    versionCatalogs {
        libs {
            from(files("$rootDir/gradle/versions.toml"))
        }
    }
    repositories {
        mavenCentral()
        maven { url = 'https://jitpack.io' }
        maven {
            name = "instrumentFormsRepository-third-party"
            url = "https://cache-redirector.jetbrains.com/intellij-dependencies"
        }
        maven {
            name = "instrumentFormsRepository-jetbrains"
            url = "https://www.jetbrains.com/intellij-repository/releases"
        }
    }
}
//hack to enable INFO log level by default
/*

class TimestampOutputStream extends OutputStream {
    private final OutputStream delegate
    private final SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
    private final ByteArrayOutputStream buffer = new ByteArrayOutputStream()
    private boolean startOfLine = true

    TimestampOutputStream(OutputStream delegate) {
        this.delegate = delegate
    }

    @Override
    void write(int b) throws IOException {
        if (startOfLine) {
            String timestamp = formatter.format(new Date()) + " "
            delegate.write(timestamp.getBytes("UTF-8"))
            startOfLine = false
        }

        buffer.write(b)

        if (b == '\n') {
            buffer.writeTo(delegate)
            buffer.reset()
            startOfLine = true
        }
    }

    @Override
    void flush() throws IOException {
        buffer.flush()
        delegate.flush()
    }

    @Override
    void close() throws IOException {
        buffer.close()
        delegate.close()
    }
}


def LoggerFactory = Class.forName("org.slf4j.LoggerFactory")
def OutputEventListenerBackedLoggerContext = Class.forName("org.gradle.internal.logging.slf4j.OutputEventListenerBackedLoggerContext")
def OutputEventListener = Class.forName("org.gradle.internal.logging.events.OutputEventListener")
def StandardOutputListener = Class.forName("org.gradle.api.logging.StandardOutputListener")
def StreamBackedStandardOutputListener = Class.forName("org.gradle.internal.logging.text.StreamBackedStandardOutputListener")
def StyledTextOutput = Class.forName("org.gradle.internal.logging.text.StyledTextOutput")
def StreamingStyledTextOutput = Class.forName("org.gradle.internal.logging.text.StreamingStyledTextOutput")
def StyledTextOutputBackedRenderer = Class.forName("org.gradle.internal.logging.console.StyledTextOutputBackedRenderer")

def newStreamBackedStandardOutputListener = StreamBackedStandardOutputListener.getDeclaredConstructor(OutputStream.class)
def newStreamingStyledTextOutput = StreamingStyledTextOutput.getDeclaredConstructor(StandardOutputListener)
def newStyledTextOutputBackedRenderer = StyledTextOutputBackedRenderer.getDeclaredConstructor(StyledTextOutput)

def gradleLoggerFactory = LoggerFactory.getDeclaredMethod("getILoggerFactory").invoke(null)
OutputEventListenerBackedLoggerContext.getDeclaredMethod("setLevel", LogLevel.class).invoke(gradleLoggerFactory, LogLevel.INFO)

def streamBackedStandardOutputListener = newStreamBackedStandardOutputListener.newInstance(
        new TimestampOutputStream(new FileOutputStream(new File("$rootDir/gradle.log")))
)
def streamingStyledTextOutput = newStreamingStyledTextOutput.newInstance(streamBackedStandardOutputListener)
def styledTextOutputBackedRenderer = newStyledTextOutputBackedRenderer.newInstance(streamingStyledTextOutput)
OutputEventListenerBackedLoggerContext.getDeclaredMethod("setOutputEventListener", OutputEventListener).invoke(gradleLoggerFactory, styledTextOutputBackedRenderer)
*/

