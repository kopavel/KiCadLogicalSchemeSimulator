/*
 * Copyright (c) 2024 Pavel Korzh
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 * may be used to endorse or promote products derived from this software
 * without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */


import org.gradle.api.initialization.resolve.RepositoriesMode

rootProject.name = 'KiCadLogicalSchemeSimulator'
include ':schemaParts'
include ':schemaParts:and'
include ':schemaParts:buffer'
include ':schemaParts:oscillator'
include ':schemaParts:counter'
include ':schemaParts:dCounter'
include ':schemaParts:dcTrigger'
include ':schemaParts:decoder'
include ':schemaParts:display'
include ':schemaParts:jkTrigger'
include ':schemaParts:jnCounter'
include ':schemaParts:led'
include ':schemaParts:multiplexer'
include ':schemaParts:or'
include ':schemaParts:power'
include ':schemaParts:ram'
include ':schemaParts:repeater'
include ':schemaParts:rom'
include ':schemaParts:sdram'
include ':schemaParts:shifter'
include ':schemaParts:stateMachine'
include ':schemaParts:switch'
include ':schemaParts:xor'
include ':schemaParts:z80'
include ':simulator'
include ':unnamedModules:ideaGui'

dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.PREFER_SETTINGS)
    versionCatalogs {
        libs {
            from(files("$rootDir/gradle/versions.toml"))
        }
    }
    repositories {
        mavenCentral()
        maven {
            name "instrumentFormsRepository-third-party"
            url "https://cache-redirector.jetbrains.com/intellij-dependencies"
        }
        maven {
            name "instrumentFormsRepository-jetbrains"
            url "https://www.jetbrains.com/intellij-repository/releases"
        }
    }
}
//hack to enable INFO log level by default
/*
def LoggerFactory = Class.forName("org.slf4j.LoggerFactory")
def OutputEventListenerBackedLoggerContext = Class.forName("org.gradle.internal.logging.slf4j.OutputEventListenerBackedLoggerContext")
def OutputEventListener = Class.forName("org.gradle.internal.logging.events.OutputEventListener")
def StandardOutputListener = Class.forName("org.gradle.api.logging.StandardOutputListener")
def StreamBackedStandardOutputListener = Class.forName("org.gradle.internal.logging.text.StreamBackedStandardOutputListener")
def StyledTextOutput = Class.forName("org.gradle.internal.logging.text.StyledTextOutput")
def StreamingStyledTextOutput = Class.forName("org.gradle.internal.logging.text.StreamingStyledTextOutput")
def StyledTextOutputBackedRenderer = Class.forName("org.gradle.internal.logging.console.StyledTextOutputBackedRenderer")

def newStreamBackedStandardOutputListener = StreamBackedStandardOutputListener.getDeclaredConstructor(OutputStream.class)
def newStreamingStyledTextOutput = StreamingStyledTextOutput.getDeclaredConstructor(StandardOutputListener)
def newStyledTextOutputBackedRenderer = StyledTextOutputBackedRenderer.getDeclaredConstructor(StyledTextOutput)

def gradleLoggerFactory = LoggerFactory.getDeclaredMethod("getILoggerFactory").invoke(null)
OutputEventListenerBackedLoggerContext.getDeclaredMethod("setLevel", LogLevel.class).invoke(gradleLoggerFactory, LogLevel.INFO)

def streamBackedStandardOutputListener = newStreamBackedStandardOutputListener.newInstance(new FileOutputStream(new File("$rootDir/gradle.log")))
def streamingStyledTextOutput = newStreamingStyledTextOutput.newInstance(streamBackedStandardOutputListener)
def styledTextOutputBackedRenderer = newStyledTextOutputBackedRenderer.newInstance(streamingStyledTextOutput)
OutputEventListenerBackedLoggerContext.getDeclaredMethod("setOutputEventListener", OutputEventListener).invoke(gradleLoggerFactory, styledTextOutputBackedRenderer)
*/

